#!/bin/bash

# shellcheck disable=SC1091
source ./aserta

_clean() {
    _assert_reset # reset state

	# shellcheck disable=SC1007
	# shellcheck disable=SC2034
    DEBUG= STOP= INVARIANT=1 DISCOVERONLY= CONTINUE= # reset flags

    eval "$*" # read new flags
}

# "Demo" tests
# ------------

assert "echo"                           # no output expected
assert "echo foo" "foo"                 # output expected
assert "cat" "bar" "bar"                # output expected if input's given
assert_raises "true" 0 ""               # status code expected
assert_raises "exit 127" 127 ""         # status code expected
assert "head -1 < $0" "#!/bin/bash"     # redirections
assert "seq 2" "1\n2"                   # multi-line output expected

										# shellcheck disable=SC2016
assert_raises 'read a; exit $a' 42 "42" # variables still work

assert "echo 1;
echo 2      # ^" "1\n2"                 # semicolon required!

assert 'echo " * "' " * "               # don't let the shell evaluate arguments
assert "echo '%s --'" "%s --"           # don't escape user content
assert "echo \"foo\nbar\"" "foo\nbar"   # interpretation of backslash escape

assert_end demo


# "Output" tests
# --------------

# clean output
assert "_clean; assert true; assert_end" \
"all 1 tests passed."
# error reports on failure
assert "_clean; assert 'seq 1'; assert_end" \
'test #1 "seq 1" failed:\n\texpected nothing\n\tgot "1"\n1 of 1 tests failed.'
assert "_clean; assert true '1'; assert_end" \
'test #1 "true" failed:\n\texpected "1"\n\tgot nothing\n1 of 1 tests failed.'
assert "_clean; assert 'true' 'foo' 'bar'; assert_end" \
'test #1 "true <<< bar" failed:\n\texpected "foo"\n\tgot nothing\n1 of 1 tests failed.'
# debug output (-v)
assert "_clean DEBUG=1; assert true; assert_end" \
".\nall 1 tests passed."
assert "_clean DEBUG=1; assert_raises false; assert_end" \
'X\ntest #1 "false" failed:\n\tprogram terminated with code 1 instead of 0
1 of 1 tests failed.'
# collect tests only (-d)
assert "_clean DISCOVERONLY=1; assert true; assert false; assert_end" \
"collected 2 tests."
# stop immediately on failure (-x)
assert "_clean STOP=1; assert_raises false; assert_end" \
'test #1 "false" failed:\n\tprogram terminated with code 1 instead of 0'
# runtime statistics (omission of -i)
assert_raises "_clean INVARIANT=;
assert_end | egrep 'all 0 tests passed in ([0-9]|[0-9].[0-9]{3})s'"
# always exit successfully (--continue)
assert_raises "bash -c 'source aserta; assert_raises false; assert_end' \
	'' --continue" 0
# skip
assert "_clean; skip; assert_raises false; assert_raises true; assert_end" \
"all 1 tests passed."
# conditional skip
assert "_clean; skip_if true; assert_raises false; assert_end;" \
"all 0 tests passed."
assert "_clean; skip_if false; assert_raises true; assert_end;" \
"all 1 tests passed."
assert "_clean; skip_if bash -c 'exit 1'; assert_raises false; assert_end;" \
"all 0 tests passed."
# subshells and pipes can be used in skip as well (albeit escaped)
assert "_clean; skip_if 'id | grep \$(echo \$USER)';
assert_raises false; assert_end;" \
"all 0 tests passed."

assert_end output


# "Interaction" tests
# -------------------

# stderr should NOT leak if ignored
assert "_clean; assert less" ""
# stderr should be redirectable though
assert '_clean; assert "less 2>&1" "Missing filename (\"less --help\" for help)"'
# bash failures behave just like stderr
assert "_clean; assert ___invalid" ""
# test suites can be nested and settings are inherited
# (ie. we don't need to invoke the inner suite with the very same options,
# namely --invariant)
assert "_clean; bash -c '
source aserta;
assert_raises true; assert_end outer;
bash -c \"source aserta; assert_raises true; assert_end inner\"
' '<exec>' --invariant" "all 1 outer tests passed.
all 1 inner tests passed."  # <exec> is $0
# set the correct exit status
assert_raises "_clean; bash -c \"
source aserta; assert true ''; assert_end one;
assert 'echo bar' 'bar'; assert_end two\"" 0
assert_raises "_clean; bash -c \"
source aserta; assert true 'foo'; assert_end one;
assert 'echo bar' 'bar'; assert_end two\"" 1
# ..but do not override it
assert_raises "_clean; bash -c \"
source aserta; assert true 'foo'; assert_end one;
assert 'echo bar' 'bar'; assert_end two; exit 3\"" 3
# environment variables do not leak
assert "_clean; x=0; assert 'x=1'; assert_raises 'x=2'; echo \$x" 0
assert "_clean; x=0; assert 'export x=1'; assert_raises 'export x=2';
echo \$x" 0
# options do not leak
assert_raises "shopt -o errexit" 1
assert_raises "set -e"
assert_raises "shopt -o errexit" 1
# skip properly resets all options
assert_raises "_clean; set +e; skip; assert_raises false; shopt -o errexit" 1
assert_raises "_clean; set -e; skip; assert_raises false; shopt -o errexit"
assert_raises "_clean; shopt -u extdebug; skip; assert_raises false; shopt extdebug" 1
assert_raises "_clean; shopt -s extdebug; skip; assert_raises false; shopt extdebug"

assert_end interaction


# "Regression" tests
# -------------------

# commit: fixed output to report all errors, not just the first
assert "_clean;
assert_raises false; assert_raises false;
assert_end" 'test #1 "false" failed:
\tprogram terminated with code 1 instead of 0
test #2 "false" failed:
\tprogram terminated with code 1 instead of 0
2 of 2 tests failed.'

# commit: added default value for assert_raises
assert_raises "_clean; assert_raises true; assert_end" 0

# commit: fixed verbose failure reports in assert_raises
assert "_clean DEBUG=1; assert_raises false; assert_end" 'X
test #1 "false" failed:
\tprogram terminated with code 1 instead of 0
1 of 1 tests failed.'

# commit: redirected assert_raises output
assert "_clean; assert_raises 'echo 1'; assert_end" "all 1 tests passed."

# commit: fixed --discover to reset properly
assert "_clean DISCOVERONLY=1;
assert 1; assert 1; assert_end;
assert 1; assert_end;" "collected 2 tests.\ncollected 1 tests."

# commit: stopped errors from leaking into other test suites
assert "_clean;
assert_raises false; assert_raises false; assert_end;
assert_raises false; assert_end" 'test #1 "false" failed:
\tprogram terminated with code 1 instead of 0
test #2 "false" failed:
\tprogram terminated with code 1 instead of 0
2 of 2 tests failed.
test #1 "false" failed:
\tprogram terminated with code 1 instead of 0
1 of 1 tests failed.'

# issue 1: assert.sh: line 87: DISCOVERONLY: unbound variable
assert "_clean; set -u; assert_raises true; assert true; assert_end" \
"all 2 tests passed."

# commit: supported formatting codes
assert "echo %s" "%s"

# We trim the output from wc as the BSD version (on Mac OS) contains leading spaces
assert "echo -n %s | wc -c | tr -d '[[:space:]]'" "2"

# commit: Supporting multiline inputs
# trim the output from wc as the BSD version (on Mac OS) has leading spaces
assert 'echo "this
is a multiline echo" | wc -l | tr -d "[[:space:]]"' "2"
assert 'echo -e "this\nis a multiline echo" | wc -l | tr -d "[[:space:]]"' "2"

assert_end regression


# assert_success tests
# --------------------

# Tests expecting success
assert_success "true"
assert_success "echo foo"
assert_success "cat" "foo"

# Tests expecting failure
assert_raises 'assert_success "false"' 1
assert_raises 'assert_success "exit 1"' 1

assert_end assert_success


# assert_failure tests
# --------------------

# Tests expecting success
assert_failure "false"
assert_failure "exit 1"
assert_failure "exit -1"
assert_failure "exit 42"
assert_failure "exit -42"

# Tests expecting failure
assert_raises 'assert_failure "true"' 1
assert_raises 'assert_failure "echo foo"' 1

assert_end assert_failure


# assert_contains tests
# ---------------------

# Tests expecting success
assert_contains "echo foo" "foo"
assert_contains "echo foobar" "foo"
assert_contains "echo foo bar" "foo"
assert_contains "echo foo bar" "bar"
assert_contains "echo foo bar" "foo bar"

# Tests expecting failure
assert_failure 'assert_contains "echo foo" "foot"'
assert_failure 'assert_contains "echo foo" "f.."'

# Multi-word argument tests
assert_contains "echo foo bar" "foo bar"
assert_failure 'assert_contains "echo foo; echo bar" "foo bar"'

assert_end assert_contains


# assert_NOTcontains tests
# ------------------------

# Tests expecting success
assert_NOTcontains "echo foo" "bar"
assert_NOTcontains "echo foo bar" "oba"

# Tests expecting failure
assert_failure 'assert_NOTcontains "echo foo" "f"'
assert_failure 'assert_NOTcontains "echo foo" "foo"'
assert_failure 'assert_NOTcontains "echo foobar" "ob"'
assert_failure 'assert_NOTcontains "echo foo bar" "o ba"'

assert_end assert_NOTcontains


# assert_matches tests
# --------------------

# Tests expecting success
assert_matches "echo foo" "f.."
assert_matches "echo foobar" "f."
assert_matches "echo foo bar" "^foo bar$"
assert_matches "echo foo bar" "[a-z ]+"

# Tests expecting failure
assert_failure 'assert_matches "echo foot" "foo$"'

# Multi-word argument tests
assert_matches "echo foo bar" "foo .*"
assert_failure 'assert_matches "echo foo; echo bar" "foo .*"'

assert_end assert_matches


# assert_startswith tests
# -----------------------

# Tests expecting success
assert_startswith "echo foo" "f"
assert_startswith "echo foo" "foo"
assert_startswith "echo this foo bar" "this"
assert_startswith "echo foo; echo bar" "foo"

# Tests expecting failure
assert_failure 'assert_startswith "echo foo" "oo"'
assert_failure 'assert_startswith "echo foo; echo bar" "foo bar"'
assert_failure 'assert_startswith "echo foo" "."'

assert_end assert_startswith


# assert_endswith tests
# ---------------------

# Tests expecting success
assert_endswith "echo foo" "oo"
assert_endswith "echo foo" "foo"
assert_endswith "echo foo; echo bar" "bar"

# Tests expecting failure
assert_failure 'assert_endswith "echo foo" "f"'
assert_failure 'assert_endswith "echo foo; echo bar" "foo bar"'
assert_failure 'assert_endswith "echo foo" "."'

assert_end assert_endswith


# string comparisons tests
# ------------------------

textParagraph="this is the beginning
of a long text, and
this is the end"

assert_str_equals "foo" "foo"
assert_failure 'assert_str_equals "foot" "foo"'
assert_failure 'assert_str_equals "foot" "oot"'
assert_failure 'assert_str_equals "foot" "o"'

assert_str_NOTequals "foo" "bar"
assert_str_NOTequals "foo" "FOO"
assert_failure 'assert_str_NOTequals "foot" "foot"'
assert_str_NOTequals "$textParagraph" "of a long text"

assert_str_contains "foo" "foo"
assert_str_contains "foobar" "foo"
assert_str_contains "foo bar" "oo b"
assert_str_contains "foo bar" "bar"
assert_str_contains "foo bar" "foo bar"
assert_failure 'assert_str_contains "foot" "to"'
assert_str_contains "$textParagraph" ", and
this is" # newlines must be literal (\n doesn't work)

assert_str_NOTcontains "foo" "of"
assert_str_NOTcontains "foo bar" "oba"
assert_failure 'assert_str_NOTcontains "foot" "oo"'
assert_str_NOTcontains "$textParagraph" ", and this is"

assert_str_startswith "foo" "f"
assert_str_startswith "foo" "foo"
assert_str_startswith "foo bar" "foo "
assert_failure 'assert_str_startswith "foot" "t"'

assert_str_startswith "$textParagraph" "this is the be"

assert_str_endswith "foo" "oo"
assert_str_endswith "foo" "foo"
assert_str_endswith "$textParagraph" "is the end"
assert_failure 'assert_str_endswith "foot" "f"'

assert_str_matches "foo" "f.."
assert_str_matches "foobar" "f."
assert_str_matches "foo bar" "^foo bar$"
assert_str_matches "foo bar" "[az ]+"
assert_str_matches "foo bar" "foo .*"
assert_failure 'assert_str_matches "foot" "foo$"'
assert_str_matches "$textParagraph" "this [is]{2}"

assert_end "string comparisons"


# Running tests
# -------------

# Basic support
assert './aserta -v assert_success true' '.'
assert './aserta -v assert_success false' 'X'
assert_success './aserta -x assert_success true'
assert_failure './aserta -x assert_success false'

# Rest of supported functions
assert_success './aserta -x assert_failure false'
assert_success './aserta -x assert_raises true 0'
assert_success './aserta -x assert_raises false 1'

assert_success './aserta -x assert "echo foo" "foo"'
assert_success './aserta -x assert_contains "echo foobar" oba'
assert_success './aserta -x assert_NOTcontains "echo foo" bar'
assert_success './aserta -x assert_startswith "echo foobar" foo'
assert_success './aserta -x assert_endswith "echo foobar" bar'
assert_success './aserta -x assert_matches "echo foo" "^f..$"'

assert_success './aserta -x assert_str_equals "foobar" "foobar"'
assert_success './aserta -x assert_str_NOTequals foobar foo'
assert_success './aserta -x assert_str_startswith foobar foo'
assert_success './aserta -x assert_str_endswith foobar bar'
assert_success './aserta -x assert_str_contains foobar ob'
assert_success './aserta -x assert_str_NOTcontains foobar bo'
assert_success './aserta -x assert_str_matches foobar "^f.+r$"'

assert_end "running"

